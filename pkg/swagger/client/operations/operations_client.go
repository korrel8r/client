// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new operations API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new operations API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetDomains(params *GetDomainsParams, opts ...ClientOption) (*GetDomainsOK, error)

	GetDomainsDomainClasses(params *GetDomainsDomainClassesParams, opts ...ClientOption) (*GetDomainsDomainClassesOK, error)

	GetObjects(params *GetObjectsParams, opts ...ClientOption) (*GetObjectsOK, error)

	PostGraphsGoals(params *PostGraphsGoalsParams, opts ...ClientOption) (*PostGraphsGoalsOK, error)

	PostGraphsNeighbours(params *PostGraphsNeighboursParams, opts ...ClientOption) (*PostGraphsNeighboursOK, error)

	PostListsGoals(params *PostListsGoalsParams, opts ...ClientOption) (*PostListsGoalsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetDomains gets name configuration and status for each domain
*/
func (a *Client) GetDomains(params *GetDomainsParams, opts ...ClientOption) (*GetDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomains",
		Method:             "GET",
		PathPattern:        "/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDomainsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDomainsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDomainsDomainClasses gets class names and descriptions for a domain
*/
func (a *Client) GetDomainsDomainClasses(params *GetDomainsDomainClassesParams, opts ...ClientOption) (*GetDomainsDomainClassesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsDomainClassesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomainsDomainClasses",
		Method:             "GET",
		PathPattern:        "/domains/{domain}/classes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDomainsDomainClassesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainsDomainClassesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDomainsDomainClassesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetObjects executes a query returns a list of JSON objects
*/
func (a *Client) GetObjects(params *GetObjectsParams, opts ...ClientOption) (*GetObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjects",
		Method:             "GET",
		PathPattern:        "/objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetObjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostGraphsGoals creates a correlation graph from start objects to goal queries
*/
func (a *Client) PostGraphsGoals(params *PostGraphsGoalsParams, opts ...ClientOption) (*PostGraphsGoalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGraphsGoalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostGraphsGoals",
		Method:             "POST",
		PathPattern:        "/graphs/goals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostGraphsGoalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGraphsGoalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostGraphsGoalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostGraphsNeighbours creates a neighbourhood graph around a start object to a given depth
*/
func (a *Client) PostGraphsNeighbours(params *PostGraphsNeighboursParams, opts ...ClientOption) (*PostGraphsNeighboursOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGraphsNeighboursParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostGraphsNeighbours",
		Method:             "POST",
		PathPattern:        "/graphs/neighbours",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostGraphsNeighboursReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGraphsNeighboursOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostGraphsNeighboursDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostListsGoals creates a list of goal nodes related to a starting point
*/
func (a *Client) PostListsGoals(params *PostListsGoalsParams, opts ...ClientOption) (*PostListsGoalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostListsGoalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostListsGoals",
		Method:             "POST",
		PathPattern:        "/lists/goals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostListsGoalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostListsGoalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostListsGoalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
